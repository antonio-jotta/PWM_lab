
PWM_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b1c  08004b1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b24  08004b24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000000c  08004b38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08004b38  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116a5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025db  00000000  00000000  00031724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00033d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c52  00000000  00000000  00034cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bf4  00000000  00000000  0003590a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fac  00000000  00000000  000574fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf2b3  00000000  00000000  0006a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004378  00000000  00000000  00139760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0013dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004aec 	.word	0x08004aec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004aec 	.word	0x08004aec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b092      	sub	sp, #72	; 0x48
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fbed 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f843 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f985 	bl	800081c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000512:	f000 f92b 	bl	800076c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000516:	f000 f953 	bl	80007c0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800051a:	f000 f8a7 	bl	800066c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800051e:	2100      	movs	r1, #0
 8000520:	4818      	ldr	r0, [pc, #96]	; (8000584 <main+0x84>)
 8000522:	f002 fac9 	bl	8002ab8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000526:	2104      	movs	r1, #4
 8000528:	4816      	ldr	r0, [pc, #88]	; (8000584 <main+0x84>)
 800052a:	f002 fac5 	bl	8002ab8 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */


	  //Teste de abertura dos servos
	  for(dutycycle1 = 5.5; dutycycle1 <= 10.0; dutycycle1 += 0.5)
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <main+0x88>)
 8000530:	4a16      	ldr	r2, [pc, #88]	; (800058c <main+0x8c>)
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	e01b      	b.n	800056e <main+0x6e>
	  {
		  TIM2->CCR1 = dutycycle1*600;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0x88>)
 8000538:	edd3 7a00 	vldr	s15, [r3]
 800053c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000590 <main+0x90>
 8000540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800054c:	ee17 2a90 	vmov	r2, s15
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000556:	f000 fc37 	bl	8000dc8 <HAL_Delay>
	  for(dutycycle1 = 5.5; dutycycle1 <= 10.0; dutycycle1 += 0.5)
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x88>)
 800055c:	edd3 7a00 	vldr	s15, [r3]
 8000560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000564:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <main+0x88>)
 800056a:	edc3 7a00 	vstr	s15, [r3]
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <main+0x88>)
 8000570:	edd3 7a00 	vldr	s15, [r3]
 8000574:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800057c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000580:	d9d9      	bls.n	8000536 <main+0x36>
 8000582:	e7d4      	b.n	800052e <main+0x2e>
 8000584:	2000002c 	.word	0x2000002c
 8000588:	20000028 	.word	0x20000028
 800058c:	40b00000 	.word	0x40b00000
 8000590:	44160000 	.word	0x44160000

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fa76 	bl	8004a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	; (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xd4>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f001 ff05 	bl	800242c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 f9a6 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f87a 	bl	8001744 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 f98f 	bl	8000978 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_TIM2_Init+0xfc>)
 800069e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 28-1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006a6:	221b      	movs	r2, #27
 80006a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006b2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80006b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c4:	4828      	ldr	r0, [pc, #160]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006c6:	f002 f94f 	bl	8002968 <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006d0:	f000 f952 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006de:	4619      	mov	r1, r3
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006e2:	f002 fb73 	bl	8002dcc <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006ec:	f000 f944 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006f0:	481d      	ldr	r0, [pc, #116]	; (8000768 <MX_TIM2_Init+0xfc>)
 80006f2:	f002 f988 	bl	8002a06 <HAL_TIM_PWM_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006fc:	f000 f93c 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4619      	mov	r1, r3
 800070e:	4816      	ldr	r0, [pc, #88]	; (8000768 <MX_TIM2_Init+0xfc>)
 8000710:	f002 ff34 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800071a:	f000 f92d 	bl	8000978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071e:	2360      	movs	r3, #96	; 0x60
 8000720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_TIM2_Init+0xfc>)
 8000736:	f002 fa87 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000740:	f000 f91a 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <MX_TIM2_Init+0xfc>)
 800074c:	f002 fa7c 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000756:	f000 f90f 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <MX_TIM2_Init+0xfc>)
 800075c:	f000 f95a 	bl	8000a14 <HAL_TIM_MspPostInit>

}
 8000760:	bf00      	nop
 8000762:	3738      	adds	r7, #56	; 0x38
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000002c 	.word	0x2000002c

0800076c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_USART3_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000778:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800077c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 80007a4:	f002 ff66 	bl	8003674 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f8e3 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000074 	.word	0x20000074
 80007bc:	40004800 	.word	0x40004800

080007c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2206      	movs	r2, #6
 80007d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	f000 fe55 	bl	80014b2 <HAL_PCD_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f8b3 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000b8 	.word	0x200000b8

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a4b      	ldr	r2, [pc, #300]	; (8000968 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b49      	ldr	r3, [pc, #292]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a44      	ldr	r2, [pc, #272]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b42      	ldr	r3, [pc, #264]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a3d      	ldr	r2, [pc, #244]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a36      	ldr	r2, [pc, #216]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80008e0:	4822      	ldr	r0, [pc, #136]	; (800096c <MX_GPIO_Init+0x150>)
 80008e2:	f000 fdcd 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x154>)
 80008ec:	f000 fdc8 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <MX_GPIO_Init+0x158>)
 8000908:	f000 fc26 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800090c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_GPIO_Init+0x150>)
 8000926:	f000 fc17 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0x154>)
 8000942:	f000 fc09 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0x154>)
 800095a:	f000 fbfd 	bl	8001158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400
 8000970:	40021800 	.word	0x40021800
 8000974:	40020800 	.word	0x40020800

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e4:	d10d      	bne.n	8000a02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a34:	d11d      	bne.n	8000a72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_TIM_MspPostInit+0x68>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_TIM_MspPostInit+0x68>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_TIM_MspPostInit+0x68>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a52:	2303      	movs	r3, #3
 8000a54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <HAL_TIM_MspPostInit+0x6c>)
 8000a6e:	f000 fb73 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0x94>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d134      	bne.n	8000b10 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af0:	2307      	movs	r3, #7
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_UART_MspInit+0x9c>)
 8000afc:	f000 fb2c 	bl	8001158 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2027      	movs	r0, #39	; 0x27
 8000b06:	f000 fa5e 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b0a:	2027      	movs	r0, #39	; 0x27
 8000b0c:	f000 fa77 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40004800 	.word	0x40004800
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0a0      	sub	sp, #128	; 0x80
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	225c      	movs	r2, #92	; 0x5c
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 ffa5 	bl	8004a94 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b52:	d14e      	bne.n	8000bf2 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 ff08 	bl	8001978 <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000b6e:	f7ff ff03 	bl	8000978 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <HAL_PCD_MspInit+0xdc>)
 8000bac:	f000 fad4 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <HAL_PCD_MspInit+0xdc>)
 8000bc6:	f000 fac7 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6353      	str	r3, [r2, #52]	; 0x34
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_PCD_MspInit+0xd8>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3780      	adds	r7, #128	; 0x80
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f89a 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <USART3_IRQHandler+0x10>)
 8000c5e:	f002 fd57 	bl	8003710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000074 	.word	0x20000074

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f003 fef1 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc1d 	bl	8000500 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd4:	08004b2c 	.word	0x08004b2c
  ldr r2, =_sbss
 8000cd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cdc:	200005c8 	.word	0x200005c8

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f94f 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe34 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f967 	bl	800101a <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f92f 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	200005c4 	.word	0x200005c4

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200005c4 	.word	0x200005c4

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff29 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff3e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff31 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa2 	bl	8000f6c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff feb6 	bl	8000db0 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d008      	beq.n	8001064 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e052      	b.n	800110a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0216 	bic.w	r2, r2, #22
 8001072:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001082:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <HAL_DMA_Abort+0x62>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0208 	bic.w	r2, r2, #8
 80010a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0201 	bic.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b4:	e013      	b.n	80010de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b6:	f7ff fe7b 	bl	8000db0 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d90c      	bls.n	80010de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2220      	movs	r2, #32
 80010c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e015      	b.n	800110a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e4      	bne.n	80010b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f0:	223f      	movs	r2, #63	; 0x3f
 80010f2:	409a      	lsls	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d004      	beq.n	8001130 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e00c      	b.n	800114a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2205      	movs	r2, #5
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e165      	b.n	8001440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8154 	bne.w	800143a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80ae 	beq.w	800143a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <HAL_GPIO_Init+0x300>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a5c      	ldr	r2, [pc, #368]	; (8001458 <HAL_GPIO_Init+0x300>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <HAL_GPIO_Init+0x300>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_GPIO_Init+0x304>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	; (8001460 <HAL_GPIO_Init+0x308>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <HAL_GPIO_Init+0x30c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x216>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4d      	ldr	r2, [pc, #308]	; (8001468 <HAL_GPIO_Init+0x310>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x212>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_GPIO_Init+0x314>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	; (8001470 <HAL_GPIO_Init+0x318>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x20a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x31c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x206>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a49      	ldr	r2, [pc, #292]	; (8001478 <HAL_GPIO_Init+0x320>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x202>
 8001356:	2306      	movs	r3, #6
 8001358:	e00c      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800135a:	2307      	movs	r3, #7
 800135c:	e00a      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800135e:	2305      	movs	r3, #5
 8001360:	e008      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 8001362:	2304      	movs	r3, #4
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 8001366:	2303      	movs	r3, #3
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 8001372:	2300      	movs	r3, #0
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f002 0203 	and.w	r2, r2, #3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	; (800145c <HAL_GPIO_Init+0x304>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_GPIO_Init+0x324>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b6:	4a31      	ldr	r2, [pc, #196]	; (800147c <HAL_GPIO_Init+0x324>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_GPIO_Init+0x324>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e0:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_GPIO_Init+0x324>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_GPIO_Init+0x324>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <HAL_GPIO_Init+0x324>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_GPIO_Init+0x324>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_GPIO_Init+0x324>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	f67f ae96 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40021400 	.word	0x40021400
 8001478:	40021800 	.word	0x40021800
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b4:	b08f      	sub	sp, #60	; 0x3c
 80014b6:	af0a      	add	r7, sp, #40	; 0x28
 80014b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e116      	b.n	80016f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d106      	bne.n	80014e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fb20 	bl	8000b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2203      	movs	r2, #3
 80014e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f003 f82b 	bl	800455e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	687e      	ldr	r6, [r7, #4]
 8001510:	466d      	mov	r5, sp
 8001512:	f106 0410 	add.w	r4, r6, #16
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001522:	e885 0003 	stmia.w	r5, {r0, r1}
 8001526:	1d33      	adds	r3, r6, #4
 8001528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f002 ffb6 	bl	800449c <USB_CoreInit>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2202      	movs	r2, #2
 800153a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0d7      	b.n	80016f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f003 f819 	bl	8004580 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e04a      	b.n	80015ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	333d      	adds	r3, #61	; 0x3d
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	333c      	adds	r3, #60	; 0x3c
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	b298      	uxth	r0, r3
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3344      	adds	r3, #68	; 0x44
 8001590:	4602      	mov	r2, r0
 8001592:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3340      	adds	r3, #64	; 0x40
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3348      	adds	r3, #72	; 0x48
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	334c      	adds	r3, #76	; 0x4c
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3354      	adds	r3, #84	; 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	3301      	adds	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3af      	bcc.n	8001554 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e044      	b.n	8001684 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	3301      	adds	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	d3b5      	bcc.n	80015fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	687e      	ldr	r6, [r7, #4]
 8001696:	466d      	mov	r5, sp
 8001698:	f106 0410 	add.w	r4, r6, #16
 800169c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ac:	1d33      	adds	r3, r6, #4
 80016ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f002 ffb1 	bl	8004618 <USB_DevInit>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e014      	b.n	80016f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d102      	bne.n	80016e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f80a 	bl	80016fa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 f96f 	bl	80049ce <USB_DevDisconnect>

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b085      	sub	sp, #20
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	f043 0303 	orr.w	r3, r3, #3
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fabc 	bl	8000db0 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fab8 	bl	8000db0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 fb7f 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa1c 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08004b04 	.word	0x08004b04
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_RCC_GetHCLKFreq+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000000 	.word	0x20000000

08001928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800192c:	f7ff fff0 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	08004b14 	.word	0x08004b14

08001950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001954:	f7ff ffdc 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0b5b      	lsrs	r3, r3, #13
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	08004b14 	.word	0x08004b14

08001978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	496c      	ldr	r1, [pc, #432]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80019ce:	2301      	movs	r3, #1
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d010      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019de:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ec:	4960      	ldr	r1, [pc, #384]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d017      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4955      	ldr	r1, [pc, #340]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d017      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a48:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	4946      	ldr	r1, [pc, #280]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a66:	d101      	bne.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a74:	2301      	movs	r3, #1
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 808a 	beq.w	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aae:	f7ff f97f 	bl	8000db0 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7ff f97b 	bl	8000db0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e278      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001adc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d02f      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d028      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001afa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d114      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f949 	bl	8000db0 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff f945 	bl	8000db0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e240      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ee      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b50:	d114      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b66:	4902      	ldr	r1, [pc, #8]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	e00c      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000
 8001b78:	42470e40 	.word	0x42470e40
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b86:	6093      	str	r3, [r2, #8]
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b94:	4944      	ldr	r1, [pc, #272]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001bae:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bbc:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bec:	492e      	ldr	r1, [pc, #184]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d011      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c00:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	4926      	ldr	r1, [pc, #152]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	491a      	ldr	r1, [pc, #104]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d011      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c58:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c60:	4911      	ldr	r1, [pc, #68]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c70:	d101      	bne.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c72:	2301      	movs	r3, #1
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c84:	f040 80ff 	bne.w	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c8e:	f7ff f88f 	bl	8000db0 <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c96:	f7ff f88b 	bl	8000db0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d907      	bls.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e188      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	424711e0 	.word	0x424711e0
 8001cb0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cb4:	4b7e      	ldr	r3, [pc, #504]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ea      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d028      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d124      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ce8:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d00:	0e1b      	lsrs	r3, r3, #24
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	431a      	orrs	r2, r3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	071b      	lsls	r3, r3, #28
 8001d2a:	4961      	ldr	r1, [pc, #388]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d46:	d00a      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d035      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d5c:	d130      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d76:	0f1b      	lsrs	r3, r3, #28
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	019b      	lsls	r3, r3, #6
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	071b      	lsls	r3, r3, #28
 8001da0:	4943      	ldr	r1, [pc, #268]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dae:	f023 021f 	bic.w	r2, r3, #31
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	3b01      	subs	r3, #1
 8001db8:	493d      	ldr	r1, [pc, #244]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d029      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd4:	d124      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dee:	0f1b      	lsrs	r3, r3, #28
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	019b      	lsls	r3, r3, #6
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	071b      	lsls	r3, r3, #28
 8001e18:	4925      	ldr	r1, [pc, #148]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d016      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	071b      	lsls	r3, r3, #28
 8001e52:	4917      	ldr	r1, [pc, #92]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e60:	f7fe ffa6 	bl	8000db0 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e68:	f7fe ffa2 	bl	8000db0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e09f      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 8095 	bne.w	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e94:	f7fe ff8c 	bl	8000db0 <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e9a:	e00f      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e9c:	f7fe ff88 	bl	8000db0 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d908      	bls.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e085      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	42470068 	.word	0x42470068
 8001eb8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ec8:	d0e8      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d02b      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d127      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001ef2:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	3b01      	subs	r3, #1
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	061b      	lsls	r3, r3, #24
 8001f20:	4928      	ldr	r1, [pc, #160]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f28:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f2e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	3b01      	subs	r3, #1
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01d      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f56:	d118      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	0e1b      	lsrs	r3, r3, #24
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	019b      	lsls	r3, r3, #6
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	4910      	ldr	r1, [pc, #64]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f90:	f7fe ff0e 	bl	8000db0 <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f98:	f7fe ff0a 	bl	8000db0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e007      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fb6:	d1ef      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3730      	adds	r7, #48	; 0x30
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470070 	.word	0x42470070

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd0:	b0ae      	sub	sp, #184	; 0xb8
 8001fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff2:	4bcb      	ldr	r3, [pc, #812]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	f200 8206 	bhi.w	800240c <HAL_RCC_GetSysClockFreq+0x440>
 8002000:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002006:	bf00      	nop
 8002008:	0800203d 	.word	0x0800203d
 800200c:	0800240d 	.word	0x0800240d
 8002010:	0800240d 	.word	0x0800240d
 8002014:	0800240d 	.word	0x0800240d
 8002018:	08002045 	.word	0x08002045
 800201c:	0800240d 	.word	0x0800240d
 8002020:	0800240d 	.word	0x0800240d
 8002024:	0800240d 	.word	0x0800240d
 8002028:	0800204d 	.word	0x0800204d
 800202c:	0800240d 	.word	0x0800240d
 8002030:	0800240d 	.word	0x0800240d
 8002034:	0800240d 	.word	0x0800240d
 8002038:	0800223d 	.word	0x0800223d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800203c:	4bb9      	ldr	r3, [pc, #740]	; (8002324 <HAL_RCC_GetSysClockFreq+0x358>)
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002042:	e1e7      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002044:	4bb8      	ldr	r3, [pc, #736]	; (8002328 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800204a:	e1e3      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4bb4      	ldr	r3, [pc, #720]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002058:	4bb1      	ldr	r3, [pc, #708]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d071      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002064:	4bae      	ldr	r3, [pc, #696]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002070:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800208a:	4622      	mov	r2, r4
 800208c:	462b      	mov	r3, r5
 800208e:	f04f 0000 	mov.w	r0, #0
 8002092:	f04f 0100 	mov.w	r1, #0
 8002096:	0159      	lsls	r1, r3, #5
 8002098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209c:	0150      	lsls	r0, r2, #5
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4621      	mov	r1, r4
 80020a4:	1a51      	subs	r1, r2, r1
 80020a6:	6439      	str	r1, [r7, #64]	; 0x40
 80020a8:	4629      	mov	r1, r5
 80020aa:	eb63 0301 	sbc.w	r3, r3, r1
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80020bc:	4649      	mov	r1, r9
 80020be:	018b      	lsls	r3, r1, #6
 80020c0:	4641      	mov	r1, r8
 80020c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020c6:	4641      	mov	r1, r8
 80020c8:	018a      	lsls	r2, r1, #6
 80020ca:	4641      	mov	r1, r8
 80020cc:	1a51      	subs	r1, r2, r1
 80020ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80020d0:	4649      	mov	r1, r9
 80020d2:	eb63 0301 	sbc.w	r3, r3, r1
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80020e4:	4649      	mov	r1, r9
 80020e6:	00cb      	lsls	r3, r1, #3
 80020e8:	4641      	mov	r1, r8
 80020ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ee:	4641      	mov	r1, r8
 80020f0:	00ca      	lsls	r2, r1, #3
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	4622      	mov	r2, r4
 80020fa:	189b      	adds	r3, r3, r2
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	462b      	mov	r3, r5
 8002100:	460a      	mov	r2, r1
 8002102:	eb42 0303 	adc.w	r3, r2, r3
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002114:	4629      	mov	r1, r5
 8002116:	024b      	lsls	r3, r1, #9
 8002118:	4621      	mov	r1, r4
 800211a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800211e:	4621      	mov	r1, r4
 8002120:	024a      	lsls	r2, r1, #9
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800212a:	2200      	movs	r2, #0
 800212c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002130:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002134:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002138:	f7fe f864 	bl	8000204 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002146:	e067      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002154:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002158:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800215c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002160:	67bb      	str	r3, [r7, #120]	; 0x78
 8002162:	2300      	movs	r3, #0
 8002164:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002166:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
 800216e:	f04f 0000 	mov.w	r0, #0
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217c:	0150      	lsls	r0, r2, #5
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4621      	mov	r1, r4
 8002184:	1a51      	subs	r1, r2, r1
 8002186:	62b9      	str	r1, [r7, #40]	; 0x28
 8002188:	4629      	mov	r1, r5
 800218a:	eb63 0301 	sbc.w	r3, r3, r1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800219c:	4649      	mov	r1, r9
 800219e:	018b      	lsls	r3, r1, #6
 80021a0:	4641      	mov	r1, r8
 80021a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a6:	4641      	mov	r1, r8
 80021a8:	018a      	lsls	r2, r1, #6
 80021aa:	4641      	mov	r1, r8
 80021ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80021b0:	4649      	mov	r1, r9
 80021b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ca:	4692      	mov	sl, r2
 80021cc:	469b      	mov	fp, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	eb1a 0303 	adds.w	r3, sl, r3
 80021d4:	623b      	str	r3, [r7, #32]
 80021d6:	462b      	mov	r3, r5
 80021d8:	eb4b 0303 	adc.w	r3, fp, r3
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021ea:	4629      	mov	r1, r5
 80021ec:	028b      	lsls	r3, r1, #10
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f4:	4621      	mov	r1, r4
 80021f6:	028a      	lsls	r2, r1, #10
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002200:	2200      	movs	r2, #0
 8002202:	673b      	str	r3, [r7, #112]	; 0x70
 8002204:	677a      	str	r2, [r7, #116]	; 0x74
 8002206:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800220a:	f7fd fffb 	bl	8000204 <__aeabi_uldivmod>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4613      	mov	r3, r2
 8002214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002218:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800222a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800222e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800223a:	e0eb      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800223c:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d06b      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	2200      	movs	r2, #0
 800225c:	66bb      	str	r3, [r7, #104]	; 0x68
 800225e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
 8002268:	2300      	movs	r3, #0
 800226a:	667b      	str	r3, [r7, #100]	; 0x64
 800226c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002270:	4622      	mov	r2, r4
 8002272:	462b      	mov	r3, r5
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	0159      	lsls	r1, r3, #5
 800227e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002282:	0150      	lsls	r0, r2, #5
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4621      	mov	r1, r4
 800228a:	1a51      	subs	r1, r2, r1
 800228c:	61b9      	str	r1, [r7, #24]
 800228e:	4629      	mov	r1, r5
 8002290:	eb63 0301 	sbc.w	r3, r3, r1
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022a2:	4659      	mov	r1, fp
 80022a4:	018b      	lsls	r3, r1, #6
 80022a6:	4651      	mov	r1, sl
 80022a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ac:	4651      	mov	r1, sl
 80022ae:	018a      	lsls	r2, r1, #6
 80022b0:	4651      	mov	r1, sl
 80022b2:	ebb2 0801 	subs.w	r8, r2, r1
 80022b6:	4659      	mov	r1, fp
 80022b8:	eb63 0901 	sbc.w	r9, r3, r1
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022d0:	4690      	mov	r8, r2
 80022d2:	4699      	mov	r9, r3
 80022d4:	4623      	mov	r3, r4
 80022d6:	eb18 0303 	adds.w	r3, r8, r3
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	462b      	mov	r3, r5
 80022de:	eb49 0303 	adc.w	r3, r9, r3
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022f0:	4629      	mov	r1, r5
 80022f2:	024b      	lsls	r3, r1, #9
 80022f4:	4621      	mov	r1, r4
 80022f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022fa:	4621      	mov	r1, r4
 80022fc:	024a      	lsls	r2, r1, #9
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002306:	2200      	movs	r2, #0
 8002308:	65bb      	str	r3, [r7, #88]	; 0x58
 800230a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800230c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002310:	f7fd ff78 	bl	8000204 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800231e:	e065      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x420>
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232c:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_GetSysClockFreq+0x458>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	2200      	movs	r2, #0
 8002334:	4618      	mov	r0, r3
 8002336:	4611      	mov	r1, r2
 8002338:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
 800233e:	2300      	movs	r3, #0
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
 8002342:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002346:	4642      	mov	r2, r8
 8002348:	464b      	mov	r3, r9
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002358:	0150      	lsls	r0, r2, #5
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4641      	mov	r1, r8
 8002360:	1a51      	subs	r1, r2, r1
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	4649      	mov	r1, r9
 8002366:	eb63 0301 	sbc.w	r3, r3, r1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002378:	4659      	mov	r1, fp
 800237a:	018b      	lsls	r3, r1, #6
 800237c:	4651      	mov	r1, sl
 800237e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002382:	4651      	mov	r1, sl
 8002384:	018a      	lsls	r2, r1, #6
 8002386:	4651      	mov	r1, sl
 8002388:	1a54      	subs	r4, r2, r1
 800238a:	4659      	mov	r1, fp
 800238c:	eb63 0501 	sbc.w	r5, r3, r1
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	00eb      	lsls	r3, r5, #3
 800239a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239e:	00e2      	lsls	r2, r4, #3
 80023a0:	4614      	mov	r4, r2
 80023a2:	461d      	mov	r5, r3
 80023a4:	4643      	mov	r3, r8
 80023a6:	18e3      	adds	r3, r4, r3
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	464b      	mov	r3, r9
 80023ac:	eb45 0303 	adc.w	r3, r5, r3
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023be:	4629      	mov	r1, r5
 80023c0:	028b      	lsls	r3, r1, #10
 80023c2:	4621      	mov	r1, r4
 80023c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c8:	4621      	mov	r1, r4
 80023ca:	028a      	lsls	r2, r1, #10
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d4:	2200      	movs	r2, #0
 80023d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023de:	f7fd ff11 	bl	8000204 <__aeabi_uldivmod>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4613      	mov	r3, r2
 80023e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0f1b      	lsrs	r3, r3, #28
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80023fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800240a:	e003      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_GetSysClockFreq+0x45c>)
 800240e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002418:	4618      	mov	r0, r3
 800241a:	37b8      	adds	r7, #184	; 0xb8
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400

0800242c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e28d      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8083 	beq.w	8002552 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800244c:	4b94      	ldr	r3, [pc, #592]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b04      	cmp	r3, #4
 8002456:	d019      	beq.n	800248c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002458:	4b91      	ldr	r3, [pc, #580]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002460:	2b08      	cmp	r3, #8
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002464:	4b8e      	ldr	r3, [pc, #568]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b84      	ldr	r3, [pc, #528]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x124>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e25a      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x90>
 80024ae:	4b7c      	ldr	r3, [pc, #496]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7b      	ldr	r2, [pc, #492]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xcc>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0xb4>
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a75      	ldr	r2, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xcc>
 80024e0:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6b      	ldr	r2, [pc, #428]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fc56 	bl	8000db0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fc52 	bl	8000db0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e21f      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xdc>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fc42 	bl	8000db0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fc3e 	bl	8000db0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e20b      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x104>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06f      	beq.n	800263e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800255e:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d017      	beq.n	800259a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258e:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x186>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1d3      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e03a      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fbeb 	bl	8000db0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025de:	f7fe fbe7 	bl	8000db0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1b4      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4925      	ldr	r1, [pc, #148]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fbca 	bl	8000db0 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002620:	f7fe fbc6 	bl	8000db0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e193      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d036      	beq.n	80026b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_RCC_OscConfig+0x27c>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fbaa 	bl	8000db0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002660:	f7fe fba6 	bl	8000db0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e173      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x234>
 800267e:	e01b      	b.n	80026b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_OscConfig+0x27c>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe fb93 	bl	8000db0 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	e00e      	b.n	80026ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268e:	f7fe fb8f 	bl	8000db0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d907      	bls.n	80026ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e15c      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	42470000 	.word	0x42470000
 80026a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	4b8a      	ldr	r3, [pc, #552]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ea      	bne.n	800268e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8097 	beq.w	80027f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b83      	ldr	r3, [pc, #524]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a7e      	ldr	r2, [pc, #504]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b7c      	ldr	r3, [pc, #496]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b79      	ldr	r3, [pc, #484]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d118      	bne.n	8002734 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002702:	4b76      	ldr	r3, [pc, #472]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a75      	ldr	r2, [pc, #468]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7fe fb4f 	bl	8000db0 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7fe fb4b 	bl	8000db0 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e118      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x31e>
 800273c:	4b66      	ldr	r3, [pc, #408]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a65      	ldr	r2, [pc, #404]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e01c      	b.n	8002784 <HAL_RCC_OscConfig+0x358>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x340>
 8002752:	4b61      	ldr	r3, [pc, #388]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a60      	ldr	r2, [pc, #384]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5d      	ldr	r2, [pc, #372]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0x358>
 800276c:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe fb10 	bl	8000db0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fb0c 	bl	8000db0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0d7      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027aa:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ee      	beq.n	8002794 <HAL_RCC_OscConfig+0x368>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe fafa 	bl	8000db0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7fe faf6 	bl	8000db0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0c1      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d6:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ee      	bne.n	80027c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	4a3a      	ldr	r2, [pc, #232]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80ad 	beq.w	8002958 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fe:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d060      	beq.n	80028cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d145      	bne.n	800289e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x4b4>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe faca 	bl	8000db0 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fac6 	bl	8000db0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e093      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	491b      	ldr	r1, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4b4>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fa9b 	bl	8000db0 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fa97 	bl	8000db0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e064      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x452>
 800289c:	e05c      	b.n	8002958 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x4b4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fa84 	bl	8000db0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fa80 	bl	8000db0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04d      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x480>
 80028ca:	e045      	b.n	8002958 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e040      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <HAL_RCC_OscConfig+0x538>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d030      	beq.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d129      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d122      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800291a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	4293      	cmp	r3, r2
 800291e:	d119      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d10f      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d107      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f820 	bl	80009d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fad8 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e041      	b.n	8002a9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f839 	bl	8002aa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f000 fa89 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_TIM_PWM_Start+0x24>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e022      	b.n	8002b22 <HAL_TIM_PWM_Start+0x6a>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d109      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x3e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e015      	b.n	8002b22 <HAL_TIM_PWM_Start+0x6a>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d109      	bne.n	8002b10 <HAL_TIM_PWM_Start+0x58>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e008      	b.n	8002b22 <HAL_TIM_PWM_Start+0x6a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07c      	b.n	8002c24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x82>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	e013      	b.n	8002b62 <HAL_TIM_PWM_Start+0xaa>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x92>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b48:	e00b      	b.n	8002b62 <HAL_TIM_PWM_Start+0xaa>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0xa2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b58:	e003      	b.n	8002b62 <HAL_TIM_PWM_Start+0xaa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fce0 	bl	8003530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_TIM_PWM_Start+0x174>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_TIM_PWM_Start+0xcc>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2c      	ldr	r2, [pc, #176]	; (8002c30 <HAL_TIM_PWM_Start+0x178>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_TIM_PWM_Start+0xd0>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_TIM_PWM_Start+0xd2>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_TIM_PWM_Start+0x174>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d022      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d01d      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_TIM_PWM_Start+0x17c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d018      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_TIM_PWM_Start+0x180>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_TIM_PWM_Start+0x184>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00e      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_TIM_PWM_Start+0x178>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_TIM_PWM_Start+0x188>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d004      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIM_PWM_Start+0x18c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d111      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d010      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c10:	e007      	b.n	8002c22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40001800 	.word	0x40001800

08002c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0ae      	b.n	8002dc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	f200 809f 	bhi.w	8002db4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08002db5 	.word	0x08002db5
 8002c84:	08002db5 	.word	0x08002db5
 8002c88:	08002db5 	.word	0x08002db5
 8002c8c:	08002cf1 	.word	0x08002cf1
 8002c90:	08002db5 	.word	0x08002db5
 8002c94:	08002db5 	.word	0x08002db5
 8002c98:	08002db5 	.word	0x08002db5
 8002c9c:	08002d33 	.word	0x08002d33
 8002ca0:	08002db5 	.word	0x08002db5
 8002ca4:	08002db5 	.word	0x08002db5
 8002ca8:	08002db5 	.word	0x08002db5
 8002cac:	08002d73 	.word	0x08002d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f9f0 	bl	800309c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0204 	bic.w	r2, r2, #4
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]
      break;
 8002cee:	e064      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fa40 	bl	800317c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
      break;
 8002d30:	e043      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fa95 	bl	8003268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0208 	orr.w	r2, r2, #8
 8002d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0204 	bic.w	r2, r2, #4
 8002d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69d9      	ldr	r1, [r3, #28]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	61da      	str	r2, [r3, #28]
      break;
 8002d70:	e023      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fae9 	bl	8003350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69d9      	ldr	r1, [r3, #28]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	61da      	str	r2, [r3, #28]
      break;
 8002db2:	e002      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
      break;
 8002db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_TIM_ConfigClockSource+0x1c>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e0b4      	b.n	8002f52 <HAL_TIM_ConfigClockSource+0x186>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e20:	d03e      	beq.n	8002ea0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e26:	f200 8087 	bhi.w	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	f000 8086 	beq.w	8002f3e <HAL_TIM_ConfigClockSource+0x172>
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	d87f      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b70      	cmp	r3, #112	; 0x70
 8002e3a:	d01a      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0xa6>
 8002e3c:	2b70      	cmp	r3, #112	; 0x70
 8002e3e:	d87b      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b60      	cmp	r3, #96	; 0x60
 8002e42:	d050      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x11a>
 8002e44:	2b60      	cmp	r3, #96	; 0x60
 8002e46:	d877      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b50      	cmp	r3, #80	; 0x50
 8002e4a:	d03c      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8002e4c:	2b50      	cmp	r3, #80	; 0x50
 8002e4e:	d873      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d058      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x13a>
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d86f      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b30      	cmp	r3, #48	; 0x30
 8002e5a:	d064      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e5c:	2b30      	cmp	r3, #48	; 0x30
 8002e5e:	d86b      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d060      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d867      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05c      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d05a      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e70:	e062      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6899      	ldr	r1, [r3, #8]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f000 fb35 	bl	80034f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	609a      	str	r2, [r3, #8]
      break;
 8002e9e:	e04f      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6899      	ldr	r1, [r3, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f000 fb1e 	bl	80034f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ec2:	609a      	str	r2, [r3, #8]
      break;
 8002ec4:	e03c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f000 fa92 	bl	80033fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2150      	movs	r1, #80	; 0x50
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 faeb 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e02c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f000 fab1 	bl	800345a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2160      	movs	r1, #96	; 0x60
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fadb 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002f04:	e01c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 fa72 	bl	80033fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2140      	movs	r1, #64	; 0x40
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 facb 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002f24:	e00c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f000 fac2 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002f36:	e003      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e000      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d00f      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d027      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d023      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d017      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <TIM_Base_SetConfig+0x128>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <TIM_Base_SetConfig+0x12c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <TIM_Base_SetConfig+0x130>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a25      	ldr	r2, [pc, #148]	; (8003090 <TIM_Base_SetConfig+0x134>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <TIM_Base_SetConfig+0x138>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <TIM_Base_SetConfig+0x13c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d108      	bne.n	8003020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d103      	bne.n	800305c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	615a      	str	r2, [r3, #20]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	40001800 	.word	0x40001800
 8003094:	40001c00 	.word	0x40001c00
 8003098:	40002000 	.word	0x40002000

0800309c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0201 	bic.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f023 0302 	bic.w	r3, r3, #2
 80030e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a20      	ldr	r2, [pc, #128]	; (8003174 <TIM_OC1_SetConfig+0xd8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_OC1_SetConfig+0x64>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <TIM_OC1_SetConfig+0xdc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10c      	bne.n	800311a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0308 	bic.w	r3, r3, #8
 8003106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a15      	ldr	r2, [pc, #84]	; (8003174 <TIM_OC1_SetConfig+0xd8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_OC1_SetConfig+0x8e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <TIM_OC1_SetConfig+0xdc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d111      	bne.n	800314e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	621a      	str	r2, [r3, #32]
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40010000 	.word	0x40010000
 8003178:	40010400 	.word	0x40010400

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0210 	bic.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0320 	bic.w	r3, r3, #32
 80031c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a22      	ldr	r2, [pc, #136]	; (8003260 <TIM_OC2_SetConfig+0xe4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_OC2_SetConfig+0x68>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a21      	ldr	r2, [pc, #132]	; (8003264 <TIM_OC2_SetConfig+0xe8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10d      	bne.n	8003200 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <TIM_OC2_SetConfig+0xe4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_OC2_SetConfig+0x94>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a16      	ldr	r2, [pc, #88]	; (8003264 <TIM_OC2_SetConfig+0xe8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d113      	bne.n	8003238 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40010400 	.word	0x40010400

08003268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <TIM_OC3_SetConfig+0xe0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_OC3_SetConfig+0x66>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <TIM_OC3_SetConfig+0xe4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10d      	bne.n	80032ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a16      	ldr	r2, [pc, #88]	; (8003348 <TIM_OC3_SetConfig+0xe0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_OC3_SetConfig+0x92>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <TIM_OC3_SetConfig+0xe4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d113      	bne.n	8003322 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
}
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40010000 	.word	0x40010000
 800334c:	40010400 	.word	0x40010400

08003350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800339a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	031b      	lsls	r3, r3, #12
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <TIM_OC4_SetConfig+0xa4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_OC4_SetConfig+0x68>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <TIM_OC4_SetConfig+0xa8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d109      	bne.n	80033cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	019b      	lsls	r3, r3, #6
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40010400 	.word	0x40010400

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345a:	b480      	push	{r7}
 800345c:	b087      	sub	sp, #28
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0210 	bic.w	r2, r3, #16
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	031b      	lsls	r3, r3, #12
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f043 0307 	orr.w	r3, r3, #7
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800350a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	431a      	orrs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2201      	movs	r2, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1a      	ldr	r2, [r3, #32]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e05a      	b.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a21      	ldr	r2, [pc, #132]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d01d      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10c      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4313      	orrs	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40010400 	.word	0x40010400
 800366c:	40014000 	.word	0x40014000
 8003670:	40001800 	.word	0x40001800

08003674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e03f      	b.n	8003706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd f9f2 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fc7b 	bl	8003fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0ba      	sub	sp, #232	; 0xe8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800374e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_UART_IRQHandler+0x66>
 8003762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fb65 	bl	8003e3e <UART_Receive_IT>
      return;
 8003774:	e256      	b.n	8003c24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80de 	beq.w	800393c <HAL_UART_IRQHandler+0x22c>
 8003780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80d1 	beq.w	800393c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_UART_IRQHandler+0xae>
 80037a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_UART_IRQHandler+0xd2>
 80037ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_UART_IRQHandler+0xf6>
 80037ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0204 	orr.w	r2, r3, #4
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <HAL_UART_IRQHandler+0x126>
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800381e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 81ed 	beq.w	8003c1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_UART_IRQHandler+0x14e>
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 faf0 	bl	8003e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d103      	bne.n	800388a <HAL_UART_IRQHandler+0x17a>
 8003882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d04f      	beq.n	800392a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9f8 	bl	8003c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d141      	bne.n	8003922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3314      	adds	r3, #20
 80038a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1d9      	bne.n	800389e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d013      	beq.n	800391a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	4a7d      	ldr	r2, [pc, #500]	; (8003aec <HAL_UART_IRQHandler+0x3dc>)
 80038f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fc07 	bl	8001112 <HAL_DMA_Abort_IT>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003914:	4610      	mov	r0, r2
 8003916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	e00e      	b.n	8003938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f99a 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e00a      	b.n	8003938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f996 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e006      	b.n	8003938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f992 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003936:	e170      	b.n	8003c1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	bf00      	nop
    return;
 800393a:	e16e      	b.n	8003c1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	2b01      	cmp	r3, #1
 8003942:	f040 814a 	bne.w	8003bda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8143 	beq.w	8003bda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 813c 	beq.w	8003bda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	f040 80b4 	bne.w	8003af0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8140 	beq.w	8003c1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039a6:	429a      	cmp	r2, r3
 80039a8:	f080 8139 	bcs.w	8003c1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	f000 8088 	beq.w	8003ad2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1d9      	bne.n	80039c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3314      	adds	r3, #20
 8003a14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e1      	bne.n	8003a0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e3      	bne.n	8003a4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa2:	f023 0310 	bic.w	r3, r3, #16
 8003aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ab4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ab6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e3      	bne.n	8003a90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fab0 	bl	8001032 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8c0 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ae8:	e099      	b.n	8003c1e <HAL_UART_IRQHandler+0x50e>
 8003aea:	bf00      	nop
 8003aec:	08003d47 	.word	0x08003d47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 808b 	beq.w	8003c22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8086 	beq.w	8003c22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8003b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e3      	bne.n	8003b16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3314      	adds	r3, #20
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b72:	633a      	str	r2, [r7, #48]	; 0x30
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e3      	bne.n	8003b4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0310 	bic.w	r3, r3, #16
 8003baa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bb8:	61fa      	str	r2, [r7, #28]
 8003bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e3      	bne.n	8003b94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f848 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bd8:	e023      	b.n	8003c22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_UART_IRQHandler+0x4ea>
 8003be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8bb 	bl	8003d6e <UART_Transmit_IT>
    return;
 8003bf8:	e014      	b.n	8003c24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <HAL_UART_IRQHandler+0x514>
 8003c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8fb 	bl	8003e0e <UART_EndTransmit_IT>
    return;
 8003c18:	e004      	b.n	8003c24 <HAL_UART_IRQHandler+0x514>
    return;
 8003c1a:	bf00      	nop
 8003c1c:	e002      	b.n	8003c24 <HAL_UART_IRQHandler+0x514>
      return;
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <HAL_UART_IRQHandler+0x514>
      return;
 8003c22:	bf00      	nop
  }
}
 8003c24:	37e8      	adds	r7, #232	; 0xe8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop

08003c2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b095      	sub	sp, #84	; 0x54
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca8:	643a      	str	r2, [r7, #64]	; 0x40
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d119      	bne.n	8003d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d3a:	bf00      	nop
 8003d3c:	3754      	adds	r7, #84	; 0x54
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff77 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b21      	cmp	r3, #33	; 0x21
 8003d80:	d13e      	bne.n	8003e00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	d114      	bne.n	8003db6 <UART_Transmit_IT+0x48>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d110      	bne.n	8003db6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]
 8003db4:	e008      	b.n	8003dc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	1c59      	adds	r1, r3, #1
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6211      	str	r1, [r2, #32]
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fefc 	bl	8003c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b08c      	sub	sp, #48	; 0x30
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b22      	cmp	r3, #34	; 0x22
 8003e50:	f040 80ab 	bne.w	8003faa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d117      	bne.n	8003e8e <UART_Receive_IT+0x50>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d113      	bne.n	8003e8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e8c:	e026      	b.n	8003edc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d007      	beq.n	8003eb2 <UART_Receive_IT+0x74>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <UART_Receive_IT+0x82>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e008      	b.n	8003ed2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d15a      	bne.n	8003fa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0220 	bic.w	r2, r2, #32
 8003efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d135      	bne.n	8003f9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	613b      	str	r3, [r7, #16]
   return(result);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	623a      	str	r2, [r7, #32]
 8003f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	69f9      	ldr	r1, [r7, #28]
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e5      	bne.n	8003f36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d10a      	bne.n	8003f8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fe67 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
 8003f9a:	e002      	b.n	8003fa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fe4f 	bl	8003c40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e002      	b.n	8003fac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
  }
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3730      	adds	r7, #48	; 0x30
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb8:	b0c0      	sub	sp, #256	; 0x100
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	68d9      	ldr	r1, [r3, #12]
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	ea40 0301 	orr.w	r3, r0, r1
 8003fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800400c:	f021 010c 	bic.w	r1, r1, #12
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800401a:	430b      	orrs	r3, r1
 800401c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402e:	6999      	ldr	r1, [r3, #24]
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	ea40 0301 	orr.w	r3, r0, r1
 800403a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b8f      	ldr	r3, [pc, #572]	; (8004280 <UART_SetConfig+0x2cc>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d005      	beq.n	8004054 <UART_SetConfig+0xa0>
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <UART_SetConfig+0x2d0>)
 8004050:	429a      	cmp	r2, r3
 8004052:	d104      	bne.n	800405e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004054:	f7fd fc7c 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
 8004058:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800405c:	e003      	b.n	8004066 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800405e:	f7fd fc63 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 8004062:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004070:	f040 810c 	bne.w	800428c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800407e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004082:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	1891      	adds	r1, r2, r2
 800408c:	65b9      	str	r1, [r7, #88]	; 0x58
 800408e:	415b      	adcs	r3, r3
 8004090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004096:	4621      	mov	r1, r4
 8004098:	eb12 0801 	adds.w	r8, r2, r1
 800409c:	4629      	mov	r1, r5
 800409e:	eb43 0901 	adc.w	r9, r3, r1
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b6:	4690      	mov	r8, r2
 80040b8:	4699      	mov	r9, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	eb18 0303 	adds.w	r3, r8, r3
 80040c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040c4:	462b      	mov	r3, r5
 80040c6:	eb49 0303 	adc.w	r3, r9, r3
 80040ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040e2:	460b      	mov	r3, r1
 80040e4:	18db      	adds	r3, r3, r3
 80040e6:	653b      	str	r3, [r7, #80]	; 0x50
 80040e8:	4613      	mov	r3, r2
 80040ea:	eb42 0303 	adc.w	r3, r2, r3
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
 80040f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040f8:	f7fc f884 	bl	8000204 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <UART_SetConfig+0x2d4>)
 8004102:	fba3 2302 	umull	r2, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	011c      	lsls	r4, r3, #4
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004114:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004118:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	1891      	adds	r1, r2, r2
 8004122:	64b9      	str	r1, [r7, #72]	; 0x48
 8004124:	415b      	adcs	r3, r3
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800412c:	4641      	mov	r1, r8
 800412e:	eb12 0a01 	adds.w	sl, r2, r1
 8004132:	4649      	mov	r1, r9
 8004134:	eb43 0b01 	adc.w	fp, r3, r1
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004144:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414c:	4692      	mov	sl, r2
 800414e:	469b      	mov	fp, r3
 8004150:	4643      	mov	r3, r8
 8004152:	eb1a 0303 	adds.w	r3, sl, r3
 8004156:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800415a:	464b      	mov	r3, r9
 800415c:	eb4b 0303 	adc.w	r3, fp, r3
 8004160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004170:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004174:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004178:	460b      	mov	r3, r1
 800417a:	18db      	adds	r3, r3, r3
 800417c:	643b      	str	r3, [r7, #64]	; 0x40
 800417e:	4613      	mov	r3, r2
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
 8004186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800418a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800418e:	f7fc f839 	bl	8000204 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4611      	mov	r1, r2
 8004198:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <UART_SetConfig+0x2d4>)
 800419a:	fba3 2301 	umull	r2, r3, r3, r1
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	1acb      	subs	r3, r1, r3
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <UART_SetConfig+0x2d4>)
 80041b0:	fba3 2302 	umull	r2, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041bc:	441c      	add	r4, r3
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041d8:	415b      	adcs	r3, r3
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6339      	str	r1, [r7, #48]	; 0x30
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800422c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004234:	460b      	mov	r3, r1
 8004236:	18db      	adds	r3, r3, r3
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
 800423a:	4613      	mov	r3, r2
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004246:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800424a:	f7fb ffdb 	bl	8000204 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <UART_SetConfig+0x2d4>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a08      	ldr	r2, [pc, #32]	; (8004288 <UART_SetConfig+0x2d4>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 0207 	and.w	r2, r3, #7
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4422      	add	r2, r4
 800427a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800427c:	e106      	b.n	800448c <UART_SetConfig+0x4d8>
 800427e:	bf00      	nop
 8004280:	40011000 	.word	0x40011000
 8004284:	40011400 	.word	0x40011400
 8004288:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800428c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004296:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800429a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800429e:	4642      	mov	r2, r8
 80042a0:	464b      	mov	r3, r9
 80042a2:	1891      	adds	r1, r2, r2
 80042a4:	6239      	str	r1, [r7, #32]
 80042a6:	415b      	adcs	r3, r3
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ae:	4641      	mov	r1, r8
 80042b0:	1854      	adds	r4, r2, r1
 80042b2:	4649      	mov	r1, r9
 80042b4:	eb43 0501 	adc.w	r5, r3, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	00eb      	lsls	r3, r5, #3
 80042c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c6:	00e2      	lsls	r2, r4, #3
 80042c8:	4614      	mov	r4, r2
 80042ca:	461d      	mov	r5, r3
 80042cc:	4643      	mov	r3, r8
 80042ce:	18e3      	adds	r3, r4, r3
 80042d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d4:	464b      	mov	r3, r9
 80042d6:	eb45 0303 	adc.w	r3, r5, r3
 80042da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042fa:	4629      	mov	r1, r5
 80042fc:	008b      	lsls	r3, r1, #2
 80042fe:	4621      	mov	r1, r4
 8004300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004304:	4621      	mov	r1, r4
 8004306:	008a      	lsls	r2, r1, #2
 8004308:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800430c:	f7fb ff7a 	bl	8000204 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4b60      	ldr	r3, [pc, #384]	; (8004498 <UART_SetConfig+0x4e4>)
 8004316:	fba3 2302 	umull	r2, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	011c      	lsls	r4, r3, #4
 800431e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004328:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800432c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	1891      	adds	r1, r2, r2
 8004336:	61b9      	str	r1, [r7, #24]
 8004338:	415b      	adcs	r3, r3
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004340:	4641      	mov	r1, r8
 8004342:	1851      	adds	r1, r2, r1
 8004344:	6139      	str	r1, [r7, #16]
 8004346:	4649      	mov	r1, r9
 8004348:	414b      	adcs	r3, r1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004358:	4659      	mov	r1, fp
 800435a:	00cb      	lsls	r3, r1, #3
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004362:	4651      	mov	r1, sl
 8004364:	00ca      	lsls	r2, r1, #3
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	4603      	mov	r3, r0
 800436c:	4642      	mov	r2, r8
 800436e:	189b      	adds	r3, r3, r2
 8004370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004374:	464b      	mov	r3, r9
 8004376:	460a      	mov	r2, r1
 8004378:	eb42 0303 	adc.w	r3, r2, r3
 800437c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	67bb      	str	r3, [r7, #120]	; 0x78
 800438a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004398:	4649      	mov	r1, r9
 800439a:	008b      	lsls	r3, r1, #2
 800439c:	4641      	mov	r1, r8
 800439e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a2:	4641      	mov	r1, r8
 80043a4:	008a      	lsls	r2, r1, #2
 80043a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043aa:	f7fb ff2b 	bl	8000204 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <UART_SetConfig+0x4e4>)
 80043b6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2264      	movs	r2, #100	; 0x64
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	3332      	adds	r3, #50	; 0x32
 80043c8:	4a33      	ldr	r2, [pc, #204]	; (8004498 <UART_SetConfig+0x4e4>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d4:	441c      	add	r4, r3
 80043d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043da:	2200      	movs	r2, #0
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
 80043de:	677a      	str	r2, [r7, #116]	; 0x74
 80043e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	1891      	adds	r1, r2, r2
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	415b      	adcs	r3, r3
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f4:	4641      	mov	r1, r8
 80043f6:	1851      	adds	r1, r2, r1
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	4649      	mov	r1, r9
 80043fc:	414b      	adcs	r3, r1
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800440c:	4659      	mov	r1, fp
 800440e:	00cb      	lsls	r3, r1, #3
 8004410:	4651      	mov	r1, sl
 8004412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004416:	4651      	mov	r1, sl
 8004418:	00ca      	lsls	r2, r1, #3
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	4603      	mov	r3, r0
 8004420:	4642      	mov	r2, r8
 8004422:	189b      	adds	r3, r3, r2
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68
 8004426:	464b      	mov	r3, r9
 8004428:	460a      	mov	r2, r1
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	663b      	str	r3, [r7, #96]	; 0x60
 800443a:	667a      	str	r2, [r7, #100]	; 0x64
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004448:	4649      	mov	r1, r9
 800444a:	008b      	lsls	r3, r1, #2
 800444c:	4641      	mov	r1, r8
 800444e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004452:	4641      	mov	r1, r8
 8004454:	008a      	lsls	r2, r1, #2
 8004456:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800445a:	f7fb fed3 	bl	8000204 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <UART_SetConfig+0x4e4>)
 8004464:	fba3 1302 	umull	r1, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2164      	movs	r1, #100	; 0x64
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <UART_SetConfig+0x4e4>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4422      	add	r2, r4
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004492:	46bd      	mov	sp, r7
 8004494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004498:	51eb851f 	.word	0x51eb851f

0800449c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 001c 	add.w	r0, r7, #28
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d122      	bne.n	80044fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa9c 	bl	8004a2c <USB_CoreReset>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e01a      	b.n	8004530 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa90 	bl	8004a2c <USB_CoreReset>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
 8004522:	e005      	b.n	8004530 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10b      	bne.n	800454e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f043 0206 	orr.w	r2, r3, #6
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800455a:	b004      	add	sp, #16
 800455c:	4770      	bx	lr

0800455e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d115      	bne.n	80045ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ae:	2001      	movs	r0, #1
 80045b0:	f7fc fc0a 	bl	8000dc8 <HAL_Delay>
      ms++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa28 	bl	8004a10 <USB_GetMode>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d01e      	beq.n	8004604 <USB_SetCurrentMode+0x84>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b31      	cmp	r3, #49	; 0x31
 80045ca:	d9f0      	bls.n	80045ae <USB_SetCurrentMode+0x2e>
 80045cc:	e01a      	b.n	8004604 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d115      	bne.n	8004600 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045e0:	2001      	movs	r0, #1
 80045e2:	f7fc fbf1 	bl	8000dc8 <HAL_Delay>
      ms++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa0f 	bl	8004a10 <USB_GetMode>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <USB_SetCurrentMode+0x84>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b31      	cmp	r3, #49	; 0x31
 80045fc:	d9f0      	bls.n	80045e0 <USB_SetCurrentMode+0x60>
 80045fe:	e001      	b.n	8004604 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e005      	b.n	8004610 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b32      	cmp	r3, #50	; 0x32
 8004608:	d101      	bne.n	800460e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004618:	b084      	sub	sp, #16
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	e009      	b.n	800464c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3340      	adds	r3, #64	; 0x40
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	2200      	movs	r2, #0
 8004644:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3301      	adds	r3, #1
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b0e      	cmp	r3, #14
 8004650:	d9f2      	bls.n	8004638 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11c      	bne.n	8004692 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004666:	f043 0302 	orr.w	r3, r3, #2
 800466a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e005      	b.n	800469e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046a4:	461a      	mov	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b0:	4619      	mov	r1, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	461a      	mov	r2, r3
 80046ba:	680b      	ldr	r3, [r1, #0]
 80046bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d10c      	bne.n	80046de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046ca:	2100      	movs	r1, #0
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f965 	bl	800499c <USB_SetDevSpeed>
 80046d2:	e008      	b.n	80046e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046d4:	2101      	movs	r1, #1
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f960 	bl	800499c <USB_SetDevSpeed>
 80046dc:	e003      	b.n	80046e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046de:	2103      	movs	r1, #3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f95b 	bl	800499c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046e6:	2110      	movs	r1, #16
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8f3 	bl	80048d4 <USB_FlushTxFifo>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f91f 	bl	800493c <USB_FlushRxFifo>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	461a      	mov	r2, r3
 8004710:	2300      	movs	r3, #0
 8004712:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	461a      	mov	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e043      	b.n	80047ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004748:	d118      	bne.n	800477c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	461a      	mov	r2, r3
 800475e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e013      	b.n	800478e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e008      	b.n	800478e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	3301      	adds	r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d3b7      	bcc.n	8004732 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	e043      	b.n	8004850 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047de:	d118      	bne.n	8004812 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	461a      	mov	r2, r3
 80047f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e013      	b.n	8004824 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e008      	b.n	8004824 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	461a      	mov	r2, r3
 8004844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004848:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3301      	adds	r3, #1
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	429a      	cmp	r2, r3
 8004856:	d3b7      	bcc.n	80047c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004878:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f043 0210 	orr.w	r2, r3, #16
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <USB_DevInit+0x2b8>)
 8004892:	4313      	orrs	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f043 0208 	orr.w	r2, r3, #8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048cc:	b004      	add	sp, #16
 80048ce:	4770      	bx	lr
 80048d0:	803c3800 	.word	0x803c3800

080048d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a13      	ldr	r2, [pc, #76]	; (8004938 <USB_FlushTxFifo+0x64>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e01b      	b.n	800492c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	daf2      	bge.n	80048e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	019b      	lsls	r3, r3, #6
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <USB_FlushTxFifo+0x64>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e006      	b.n	800492c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b20      	cmp	r3, #32
 8004928:	d0f0      	beq.n	800490c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	00030d40 	.word	0x00030d40

0800493c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a11      	ldr	r2, [pc, #68]	; (8004998 <USB_FlushRxFifo+0x5c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e018      	b.n	800498c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	daf2      	bge.n	8004948 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2210      	movs	r2, #16
 800496a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a08      	ldr	r2, [pc, #32]	; (8004998 <USB_FlushRxFifo+0x5c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e006      	b.n	800498c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b10      	cmp	r3, #16
 8004988:	d0f0      	beq.n	800496c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	00030d40 	.word	0x00030d40

0800499c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049e8:	f023 0303 	bic.w	r3, r3, #3
 80049ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <USB_CoreReset+0x64>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e01b      	b.n	8004a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	daf2      	bge.n	8004a38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <USB_CoreReset+0x64>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e006      	b.n	8004a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d0f0      	beq.n	8004a62 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	00030d40 	.word	0x00030d40

08004a94 <memset>:
 8004a94:	4402      	add	r2, r0
 8004a96:	4603      	mov	r3, r0
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d100      	bne.n	8004a9e <memset+0xa>
 8004a9c:	4770      	bx	lr
 8004a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa2:	e7f9      	b.n	8004a98 <memset+0x4>

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4d0d      	ldr	r5, [pc, #52]	; (8004adc <__libc_init_array+0x38>)
 8004aa8:	4c0d      	ldr	r4, [pc, #52]	; (8004ae0 <__libc_init_array+0x3c>)
 8004aaa:	1b64      	subs	r4, r4, r5
 8004aac:	10a4      	asrs	r4, r4, #2
 8004aae:	2600      	movs	r6, #0
 8004ab0:	42a6      	cmp	r6, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	4d0b      	ldr	r5, [pc, #44]	; (8004ae4 <__libc_init_array+0x40>)
 8004ab6:	4c0c      	ldr	r4, [pc, #48]	; (8004ae8 <__libc_init_array+0x44>)
 8004ab8:	f000 f818 	bl	8004aec <_init>
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	2600      	movs	r6, #0
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004acc:	4798      	blx	r3
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad6:	4798      	blx	r3
 8004ad8:	3601      	adds	r6, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	08004b24 	.word	0x08004b24
 8004ae0:	08004b24 	.word	0x08004b24
 8004ae4:	08004b24 	.word	0x08004b24
 8004ae8:	08004b28 	.word	0x08004b28

08004aec <_init>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr

08004af8 <_fini>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr
